︠8bddef24-a30d-4d1f-9c74-54179d97d8b3s︠
#Vamos a generar las palabras de Fibonacci p-arias
def generate_p_ary_words(p, n):
    vectors = []

    def backtrack(word):
        if len(word) == n:
            vectors.append(word)
            return

        last_char = int(word[-1]) if len(word) > 0 else -1
        if last_char == p:
            candidates = [str(p), str(p - 1)]
        elif last_char == 1:
            candidates = [str(p)]
        elif 2 <= last_char <= p - 1:
            candidates = [str(last_char - 1), str(last_char + 1)]

        for c in candidates:
            backtrack(word + c)

    backtrack(str(p))
    return vectors

# Example 
words = generate_p_ary_words(4, 8)
print("Generated p-ary words: ", words)
print("Number of p-ary words: ", len(words))



︡45048181-65ad-484b-b656-c0048e230e30︡{"stdout":"Generated p-ary words:  ['44444444', '44444443', '44444432', '44444434', '44444321', '44444323', '44444344', '44444343', '44443214', '44443232', '44443234', '44443444', '44443443', '44443432', '44443434', '44432144', '44432143', '44432321', '44432323', '44432344', '44432343', '44434444', '44434443', '44434432', '44434434', '44434321', '44434323', '44434344', '44434343', '44321444', '44321443', '44321432', '44321434', '44323214', '44323232', '44323234', '44323444', '44323443', '44323432', '44323434', '44344444', '44344443', '44344432', '44344434', '44344321', '44344323', '44344344', '44344343', '44343214', '44343232', '44343234', '44343444', '44343443', '44343432', '44343434', '43214444', '43214443', '43214432', '43214434', '43214321', '43214323', '43214344', '43214343', '43232144', '43232143', '43232321', '43232323', '43232344', '43232343', '43234444', '43234443', '43234432', '43234434', '43234321', '43234323', '43234344', '43234343', '43444444', '43444443', '43444432', '43444434', '43444321', '43444323', '43444344', '43444343', '43443214', '43443232', '43443234', '43443444', '43443443', '43443432', '43443434', '43432144', '43432143', '43432321', '43432323', '43432344', '43432343', '43434444', '43434443', '43434432', '43434434', '43434321', '43434323', '43434344', '43434343']\n"}︡{"stdout":"Number of p-ary words:  106\n"}︡{"done":true}
︠4cdea0e9-3149-45c4-a896-774b2d22b3ed︠
#intememos ver cuáles palabras están fallando en base a la relación que definimos con palabras binarias


def generate_p_ary_words(p, n):
    vectors = []

    def backtrack(word):
        if len(word) == n:
            vectors.append(word)
            return

        last_char = int(word[-1]) if len(word) > 0 else -1
        candidates = []

        if last_char == p:
            candidates = [str(p), str(p - 1)]
        elif last_char == 1:
            candidates = [str(p)]
        elif 2 <= last_char <= p - 1:
            candidates = [str(last_char - 1), str(last_char + 1)]

        for c in candidates:
            backtrack(word + c)

    backtrack(str(p))
    return vectors

def p_ary_to_binary(p_ary_word):
    binary_word = []
    for i in range(1, len(p_ary_word)):
        if p_ary_word[i] >= p_ary_word[i - 1]:
            binary_word.append('0')
        else:
            binary_word.append('1')
    return ''.join(binary_word)

def convert_p_ary_to_binary(p_ary_words):
    return [p_ary_to_binary(word) for word in p_ary_words]

def generate_binary_words_avoiding_consecutive_ones(p, n):
    words = []

    def backtrack(word, count1):
        if len(word) == n-1:
            words.append(word)
            return
        candidates = ['0', '1']
        for candidate in candidates:
            if candidate == '1' and count1 + 1 < p:
                backtrack(word + candidate, count1 + 1)
            elif candidate == '0':
                backtrack(word + candidate, 0)

    backtrack("", 0)
    return words

# Example usage
p = 4
n = 9

# Generating p-ary words
p_ary_words = generate_p_ary_words(p, n)
print("Generated p-ary words: ", p_ary_words)
print("Number of p-ary words: ", len(p_ary_words))

# Converting p-ary words to binary words
binary_words1 = convert_p_ary_to_binary(p_ary_words)
print("Converted binary words: ", binary_words1)
print("Number of binary words from p-ary words: ", len(binary_words1))

# Generating binary words avoiding p consecutive ones
binary_words2 = generate_binary_words_avoiding_consecutive_ones(p, n)
print(f"Binary words avoiding {p} consecutive ones of length {n}:")
print(binary_words2)
print("Number of binary words avoiding consecutive ones: ", len(binary_words2))
set1 = set(binary_words1)
set2 = set(binary_words2)
difference = set1.symmetric_difference(set2)
print("Difference between the two sets of binary words:", difference)
print("Number of differing binary words:", len(difference))
︡4742e821-cfba-4c82-94c5-8db025591ae2︡{"stdout":"Generated p-ary words:  ['444444444', '444444443', '444444432', '444444434', '444444321', '444444323', '444444344', '444444343', '444443214', '444443232', '444443234', '444443444', '444443443', '444443432', '444443434', '444432144', '444432143', '444432321', '444432323', '444432344', '444432343', '444434444', '444434443', '444434432', '444434434', '444434321', '444434323', '444434344', '444434343', '444321444', '444321443', '444321432', '444321434', '444323214', '444323232', '444323234', '444323444', '444323443', '444323432', '444323434', '444344444', '444344443', '444344432', '444344434', '444344321', '444344323', '444344344', '444344343', '444343214', '444343232', '444343234', '444343444', '444343443', '444343432', '444343434', '443214444', '443214443', '443214432', '443214434', '443214321', '443214323', '443214344', '443214343', '443232144', '443232143', '443232321', '443232323', '443232344', '443232343', '443234444', '443234443', '443234432', '443234434', '443234321', '443234323', '443234344', '443234343', '443444444', '443444443', '443444432', '443444434', '443444321', '443444323', '443444344', '443444343', '443443214', '443443232', '443443234', '443443444', '443443443', '443443432', '443443434', '443432144', '443432143', '443432321', '443432323', '443432344', '443432343', '443434444', '443434443', '443434432', '443434434', '443434321', '443434323', '443434344', '443434343', '432144444', '432144443', '432144432', '432144434', '432144321', '432144323', '432144344', '432144343', '432143214', '432143232', '432143234', '432143444', '432143443', '432143432', '432143434', '432321444', '432321443', '432321432', '432321434', '432323214', '432323232', '432323234', '432323444', '432323443', '432323432', '432323434', '432344444', '432344443', '432344432', '432344434', '432344321', '432344323', '432344344', '432344343', '432343214', '432343232', '432343234', '432343444', '432343443', '432343432', '432343434', '434444444', '434444443', '434444432', '434444434', '434444321', '434444323', '434444344', '434444343', '434443214', '434443232', '434443234', '434443444', '434443443', '434443432', '434443434', '434432144', '434432143', '434432321', '434432323', '434432344', '434432343', '434434444', '434434443', '434434432', '434434434', '434434321', '434434323', '434434344', '434434343', '434321444', '434321443', '434321432', '434321434', '434323214', '434323232', '434323234', '434323444', '434323443', '434323432', '434323434', '434344444', '434344443', '434344432', '434344434', '434344321', '434344323', '434344344', '434344343', '434343214', '434343232', '434343234', '434343444', '434343443', '434343432', '434343434']\n"}︡{"stdout":"Number of p-ary words:  202\n"}︡{"stdout":"Converted binary words:  ['00000000', '00000001', '00000011', '00000010', '00000111', '00000110', '00000100', '00000101', '00001110', '00001101', '00001100', '00001000', '00001001', '00001011', '00001010', '00011100', '00011101', '00011011', '00011010', '00011000', '00011001', '00010000', '00010001', '00010011', '00010010', '00010111', '00010110', '00010100', '00010101', '00111000', '00111001', '00111011', '00111010', '00110110', '00110101', '00110100', '00110000', '00110001', '00110011', '00110010', '00100000', '00100001', '00100011', '00100010', '00100111', '00100110', '00100100', '00100101', '00101110', '00101101', '00101100', '00101000', '00101001', '00101011', '00101010', '01110000', '01110001', '01110011', '01110010', '01110111', '01110110', '01110100', '01110101', '01101100', '01101101', '01101011', '01101010', '01101000', '01101001', '01100000', '01100001', '01100011', '01100010', '01100111', '01100110', '01100100', '01100101', '01000000', '01000001', '01000011', '01000010', '01000111', '01000110', '01000100', '01000101', '01001110', '01001101', '01001100', '01001000', '01001001', '01001011', '01001010', '01011100', '01011101', '01011011', '01011010', '01011000', '01011001', '01010000', '01010001', '01010011', '01010010', '01010111', '01010110', '01010100', '01010101', '11100000', '11100001', '11100011', '11100010', '11100111', '11100110', '11100100', '11100101', '11101110', '11101101', '11101100', '11101000', '11101001', '11101011', '11101010', '11011000', '11011001', '11011011', '11011010', '11010110', '11010101', '11010100', '11010000', '11010001', '11010011', '11010010', '11000000', '11000001', '11000011', '11000010', '11000111', '11000110', '11000100', '11000101', '11001110', '11001101', '11001100', '11001000', '11001001', '11001011', '11001010', '10000000', '10000001', '10000011', '10000010', '10000111', '10000110', '10000100', '10000101', '10001110', '10001101', '10001100', '10001000', '10001001', '10001011', '10001010', '10011100', '10011101', '10011011', '10011010', '10011000', '10011001', '10010000', '10010001', '10010011', '10010010', '10010111', '10010110', '10010100', '10010101', '10111000', '10111001', '10111011', '10111010', '10110110', '10110101', '10110100', '10110000', '10110001', '10110011', '10110010', '10100000', '10100001', '10100011', '10100010', '10100111', '10100110', '10100100', '10100101', '10101110', '10101101', '10101100', '10101000', '10101001', '10101011', '10101010']\n"}︡{"stdout":"Number of binary words from p-ary words:  202\n"}︡{"stdout":"Binary words avoiding 4 consecutive ones of length 9:\n"}︡{"stdout":"['00000000', '00000001', '00000010', '00000011', '00000100', '00000101', '00000110', '00000111', '00001000', '00001001', '00001010', '00001011', '00001100', '00001101', '00001110', '00010000', '00010001', '00010010', '00010011', '00010100', '00010101', '00010110', '00010111', '00011000', '00011001', '00011010', '00011011', '00011100', '00011101', '00100000', '00100001', '00100010', '00100011', '00100100', '00100101', '00100110', '00100111', '00101000', '00101001', '00101010', '00101011', '00101100', '00101101', '00101110', '00110000', '00110001', '00110010', '00110011', '00110100', '00110101', '00110110', '00110111', '00111000', '00111001', '00111010', '00111011', '01000000', '01000001', '01000010', '01000011', '01000100', '01000101', '01000110', '01000111', '01001000', '01001001', '01001010', '01001011', '01001100', '01001101', '01001110', '01010000', '01010001', '01010010', '01010011', '01010100', '01010101', '01010110', '01010111', '01011000', '01011001', '01011010', '01011011', '01011100', '01011101', '01100000', '01100001', '01100010', '01100011', '01100100', '01100101', '01100110', '01100111', '01101000', '01101001', '01101010', '01101011', '01101100', '01101101', '01101110', '01110000', '01110001', '01110010', '01110011', '01110100', '01110101', '01110110', '01110111', '10000000', '10000001', '10000010', '10000011', '10000100', '10000101', '10000110', '10000111', '10001000', '10001001', '10001010', '10001011', '10001100', '10001101', '10001110', '10010000', '10010001', '10010010', '10010011', '10010100', '10010101', '10010110', '10010111', '10011000', '10011001', '10011010', '10011011', '10011100', '10011101', '10100000', '10100001', '10100010', '10100011', '10100100', '10100101', '10100110', '10100111', '10101000', '10101001', '10101010', '10101011', '10101100', '10101101', '10101110', '10110000', '10110001', '10110010', '10110011', '10110100', '10110101', '10110110', '10110111', '10111000', '10111001', '10111010', '10111011', '11000000', '11000001', '11000010', '11000011', '11000100', '11000101', '11000110', '11000111', '11001000', '11001001', '11001010', '11001011', '11001100', '11001101', '11001110', '11010000', '11010001', '11010010', '11010011', '11010100', '11010101', '11010110', '11010111', '11011000', '11011001', '11011010', '11011011', '11011100', '11011101', '11100000', '11100001', '11100010', '11100011', '11100100', '11100101', '11100110', '11100111', '11101000', '11101001', '11101010', '11101011', '11101100', '11101101', '11101110']\n"}︡{"stdout":"Number of binary words avoiding consecutive ones:  208\n"}︡{"stdout":"Difference between the two sets of binary words: {'10110111', '11010111', '00110111', '11011100', '01101110', '11011101'}\n"}︡{"stdout":"Number of differing binary words: 6\n"}︡{"done":true}
︠dc3620db-43fa-45ae-959e-9a4909422df3s︠




#Ahora intentamos modicar las palabras con las nuevas reglas dadas por el sistema de producción:
def generate_p_ary_words(p, length):
    # Base case: the word starts with p
    words = [[p]]
    
    # Iterate for each length from 1 to the desired length
    for _ in range(length - 1):
        new_words = []
        for word in words:
            last_digit = word[-1]
            if last_digit == p:
                new_words.append(word + [p])
                new_words.append(word + [p - 1])
            elif last_digit > 1:
                new_words.append(word + [last_digit - 1])
                new_words.append(word + [p])
            else:  # last_digit == 1
                new_words.append(word + [p])
        
        words = new_words
    
    return words

def count_words(words):
    counts = {}
    for word in words:
        l = len(word)
        if l not in counts:
            counts[l] = 0
        counts[l] += 1
    return counts

# Example usage
p = 4  # Change p to your desired value
max_length = 15  # Change max_length to your desired value

all_words = []
for length in range(1, max_length + 1):
    words = generate_p_ary_words(p, length)
    all_words.extend(words)

counts = count_words(all_words)
print("Counts by length:", counts)

︡156bce41-2508-473f-8d20-fbb392fe0d2e︡{"stdout":"Counts by length: {1: 1, 2: 2, 3: 4, 4: 8, 5: 15, 6: 29, 7: 56, 8: 108, 9: 208, 10: 401, 11: 773, 12: 1490, 13: 2872, 14: 5536, 15: 10671}\n"}︡{"done":true}
︠927e9309-4d79-4d45-b7ce-029cfbc1b61b︠

︠665c89e8-8abe-47d3-b533-7a4f3570c4a9︠

︠b14ca866-5a79-4845-870a-154d417b869e︠

︠cc20f060-1cf4-4bd2-acec-a6d44c4a3b4d︠

︠52bb7fbd-decc-4f3b-ab9f-0f30c7414734︠

︠41613832-d5f5-429d-bbc9-f291c45b8da5︠










